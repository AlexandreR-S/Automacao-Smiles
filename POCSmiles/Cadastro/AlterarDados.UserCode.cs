///////////////////////////////////////////////////////////////////////////////
//
// FormProgesso file was automatically generated by RANOREX.
// Your custom recording code should go in FormProgesso file.
// The designer will only add methods to FormProgesso file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.Cadastro
{
    public partial class AlterarDados
    {
        /// <summary>
        /// FormProgesso method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void SelectItemListBox(string selectTagElement, string itemName)
        {
        	try 
        	{
        		if(itemName.Equals("")){
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Selecting item '" + itemName + "'");
        		Utils.SelectItemListBox(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + selectTagElement, itemName);	
        		Report.Log(ReportLevel.Info,"Item '" + itemName + "' selected");
        	} catch (Exception) 
        	{
        		Report.Error("AlterarDados - Error launched trying to select item '" + itemName + "' on element '" + selectTagElement + "'");
        		throw new System.Exception("AlterarDados.SeletItemListBox");
        	}
        }
		
        public static string randomCPF = "";
        public static string randomEmail = "";
        
        public void setEmail(string email)
        {
        	try {
        		if (email.Equals("")) {
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Inserting '" + email + "'");
        		if (email.Trim().Equals("ALEATORIO")) {
        			email = setRandomEmail();
        			repo.SmilesOMelhorProgramaDeMilhasS1.AlterarDados_Email.PressKeys("{END}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}"+email,Duration.FromMilliseconds(1));
        			randomEmail = email;
        		}
        		else if (email.Trim().Equals("CONFIRMAR")) {
        			repo.SmilesOMelhorProgramaDeMilhasS1.AlterarDados_ConfirmarEmail.PressKeys("{END}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}"+setRandomEmail(),Duration.FromMilliseconds(1));
        		}
        		else{
        			repo.SmilesOMelhorProgramaDeMilhasS1.AlterarDados_Email.PressKeys("{END}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}"+email,Duration.FromMilliseconds(1));
        			randomEmail = email;
        		}
        		Report.Info(email + " inserted");
        	} catch (Exception e) {
        		Report.Error("AlterarDados - Error waiting browser loading");
        		throw new System.Exception("AlterarDados.setEmail");
        	}
        }
        
        public void setCPF(){
        	randomCPF = Utils.GerarCpf();
        }
        
        public string setRandomEmail(){
        	if (randomCPF.Equals("")) {
        		setCPF();
        	}
        	return ("test" + randomCPF + "@email.com");
        }
        
		private void TypeKeys(string element, string text){
        	try 
        	{
        		if (text.Equals("")) {
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Inserting text '" + text + "'");
        		InputTag input = repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + element;
        		input.Click(Duration.FromMilliseconds(1));
        		input.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}" + text,Duration.FromMilliseconds(1));
        		Report.Log(ReportLevel.Info,"Text inserted '" + text + "'");
        	} catch (Exception) 
        	{
        		Report.Error("AlterarDados - Error launched trying to inserting text '" + text + "' on element '" + element + "'");
        		throw new System.Exception("AlterarDados.TypeKeys");
        	}
        }
    }
}