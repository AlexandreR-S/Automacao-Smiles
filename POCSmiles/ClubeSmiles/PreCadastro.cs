///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace POCSmiles.ClubeSmiles
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The PreCadastro recording.
    /// </summary>
    [TestModule("9f45cb5d-eb4f-447c-b01b-3ebad74730a6", ModuleType.Recording, 1)]
    public partial class PreCadastro : ITestModule
    {
        /// <summary>
        /// Holds an instance of the POCSmiles.SmilesRepository repository.
        /// </summary>
        public static POCSmiles.SmilesRepository repo = POCSmiles.SmilesRepository.Instance;

        static PreCadastro instance = new PreCadastro();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public PreCadastro()
        {
            CPF = "";
            Sexo = "Masculino";
            Email = "";
            ConfirmarEmail = "CONFIRMAR";
            Nome = "yourtext";
            Sobrenome = "yourtext";
            DataNascimentoDia = "yourtext";
            DataNascimentoMes = "yourtext";
            DataNascimentoAno = "yourtext";
            DocumentoIdentidade = "yourtext";
            CEP = "yourtext";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static PreCadastro Instance
        {
            get { return instance; }
        }

#region Variables

        string _CPF;

        /// <summary>
        /// Gets or sets the value of variable CPF.
        /// </summary>
        [TestVariable("76fa24ba-38ea-4f6c-a6b1-22b826ba7f62")]
        public string CPF
        {
            get { return _CPF; }
            set { _CPF = value; }
        }

        string _Sexo;

        /// <summary>
        /// Gets or sets the value of variable Sexo.
        /// </summary>
        [TestVariable("4f24f5e9-27a0-4330-830f-3480b622d9e3")]
        public string Sexo
        {
            get { return _Sexo; }
            set { _Sexo = value; }
        }

        string _Email;

        /// <summary>
        /// Gets or sets the value of variable Email.
        /// </summary>
        [TestVariable("9b112597-8253-478b-816c-0502899f5786")]
        public string Email
        {
            get { return _Email; }
            set { _Email = value; }
        }

        string _ConfirmarEmail;

        /// <summary>
        /// Gets or sets the value of variable ConfirmarEmail.
        /// </summary>
        [TestVariable("82d271db-22bd-476b-8af3-86740faffc52")]
        public string ConfirmarEmail
        {
            get { return _ConfirmarEmail; }
            set { _ConfirmarEmail = value; }
        }

        string _Nome;

        /// <summary>
        /// Gets or sets the value of variable Nome.
        /// </summary>
        [TestVariable("250b9204-29ec-4477-961d-4aeeab84fd73")]
        public string Nome
        {
            get { return _Nome; }
            set { _Nome = value; }
        }

        string _Sobrenome;

        /// <summary>
        /// Gets or sets the value of variable Sobrenome.
        /// </summary>
        [TestVariable("f7854c7e-7890-477f-be2e-0e6e49204dcb")]
        public string Sobrenome
        {
            get { return _Sobrenome; }
            set { _Sobrenome = value; }
        }

        string _DataNascimentoDia;

        /// <summary>
        /// Gets or sets the value of variable DataNascimentoDia.
        /// </summary>
        [TestVariable("cd85ec82-ee2d-4571-8125-f9462d7cb47a")]
        public string DataNascimentoDia
        {
            get { return _DataNascimentoDia; }
            set { _DataNascimentoDia = value; }
        }

        string _DataNascimentoMes;

        /// <summary>
        /// Gets or sets the value of variable DataNascimentoMes.
        /// </summary>
        [TestVariable("99531a0b-3bbe-461b-9899-425870c8b172")]
        public string DataNascimentoMes
        {
            get { return _DataNascimentoMes; }
            set { _DataNascimentoMes = value; }
        }

        string _DataNascimentoAno;

        /// <summary>
        /// Gets or sets the value of variable DataNascimentoAno.
        /// </summary>
        [TestVariable("52cbed46-d2ab-4aa0-8bdd-2adbe47b20b3")]
        public string DataNascimentoAno
        {
            get { return _DataNascimentoAno; }
            set { _DataNascimentoAno = value; }
        }

        string _DocumentoIdentidade;

        /// <summary>
        /// Gets or sets the value of variable DocumentoIdentidade.
        /// </summary>
        [TestVariable("7178fc80-342d-48ac-b9d4-5fbd4a8e2138")]
        public string DocumentoIdentidade
        {
            get { return _DocumentoIdentidade; }
            set { _DocumentoIdentidade = value; }
        }

        string _CEP;

        /// <summary>
        /// Gets or sets the value of variable CEP.
        /// </summary>
        [TestVariable("2a00d209-a964-4317-93f5-a1a32b89a0d0")]
        public string CEP
        {
            get { return _CEP; }
            set { _CEP = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.Clube_QueroEste' at Center.", repo.SmilesOMelhorProgramaDeMilhasS1.Clube_QueroEsteInfo, new RecordItemIndex(0));
            repo.SmilesOMelhorProgramaDeMilhasS1.Clube_QueroEste.Click(1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(1));
            Delay.Duration(500, false);
            
            InserirCPF(CPF);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.Clube_Continuar' at Center.", repo.SmilesOMelhorProgramaDeMilhasS1.Clube_ContinuarInfo, new RecordItemIndex(3));
            repo.SmilesOMelhorProgramaDeMilhasS1.Clube_Continuar.Click(1);
            Delay.Milliseconds(490);
            
            Report.Screenshot(ReportLevel.Success, "User", "", null, false, new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for item 'SmilesOMelhorProgramaDeMilhasS1.PValidacao_Aguarde' to not exist.", repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_AguardeInfo, new ActionTimeout(60000), new RecordItemIndex(6));
            repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_AguardeInfo.WaitForNotExists(60000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Nome' with focus on 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_Nome'.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_NomeInfo, new RecordItemIndex(7));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_Nome.PressKeys(Nome, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Sobrenome' with focus on 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_Sobrenome'.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_SobrenomeInfo, new RecordItemIndex(8));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_Sobrenome.PressKeys(Sobrenome, 1);
            Delay.Milliseconds(90);
            
            SeleclGenrerFlag(Sexo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DataNascimentoDia' with focus on 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoDia'.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoDiaInfo, new RecordItemIndex(10));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoDia.PressKeys(DataNascimentoDia, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DataNascimentoMes' with focus on 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoMes'.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoMesInfo, new RecordItemIndex(11));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoMes.PressKeys(DataNascimentoMes, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DataNascimentoAno' with focus on 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoAno'.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoAnoInfo, new RecordItemIndex(12));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DataNascimentoAno.PressKeys(DataNascimentoAno, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DocumentoIdentidade' with focus on 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DocumentoIdentidade'.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DocumentoIdentidadeInfo, new RecordItemIndex(13));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_DocumentoIdentidade.PressKeys(DocumentoIdentidade, 1);
            Delay.Milliseconds(90);
            
            setEmail(Email);
            Delay.Milliseconds(0);
            
            setEmail(ConfirmarEmail);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$CEP' with focus on 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_CEP'.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_CEPInfo, new RecordItemIndex(16));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_CEP.PressKeys(CEP, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_AceitoTermos' at CenterLeft.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_AceitoTermosInfo, new RecordItemIndex(17));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_AceitoTermos.Click(Location.CenterLeft, 1);
            Delay.Milliseconds(490);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(18));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{ESCAPE}'.", new RecordItemIndex(19));
            Keyboard.Press("{ESCAPE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(20));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.PreCadastro_Continuar' at Center.", repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_ContinuarInfo, new RecordItemIndex(21));
            repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_Continuar.Click(1);
            Delay.Milliseconds(490);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(22));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 40s for item 'SmilesOMelhorProgramaDeMilhasS1.Smiles_Aguarde' to not exist.", repo.SmilesOMelhorProgramaDeMilhasS1.Smiles_AguardeInfo, new ActionTimeout(40000), new RecordItemIndex(23));
            repo.SmilesOMelhorProgramaDeMilhasS1.Smiles_AguardeInfo.WaitForNotExists(40000);
            
            Report.Screenshot(ReportLevel.Success, "User", "", null, false, new RecordItemIndex(24));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
