///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.SolicitarMilhas
{
    public partial class SolicitarMilhas
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void SelectItemListBox(string selectTagElement, string itemName)
        {
        	try 
        	{
        		if(itemName.Equals("")){
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Selecting item '" + itemName + "'");
        		Utils.SelectItemListBox(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + selectTagElement, itemName);	
				Keyboard.Press("{RETURN}",Duration.FromMilliseconds(5));
        		Keyboard.Press("{Down}",Duration.FromMilliseconds(5));
        		Report.Log(ReportLevel.Info,"Item '" + itemName + "' selected");
        	} catch (Exception) 
        	{
        		Report.Error("SolicitarMilhas - Error launched trying to select item '" + itemName + "' on element '" + selectTagElement + "'");
        		throw new System.Exception("SolicitarMilhas.SeletItemListBox");
        	}
        }

        public void TypeKeys(string element, string text)
        {
        	try 
        	{
        		if (text.Equals("")) {
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Inserting text '" + text + "'");
        		InputTag input = repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + element;
        		input.PressKeys(text,Duration.FromMilliseconds(1));
        		Keyboard.Press("{RETURN}",Duration.FromMilliseconds(5));
        		Keyboard.Press("{Down}",Duration.FromMilliseconds(5));
        		Report.Log(ReportLevel.Info,"Text inserted '" + text + "'");
        	} catch (Exception) 
        	{
        		Report.Error("SolicitarMilhas - Error launched trying to inserting text '" + text + "' on element '" + element + "'");
        		throw new System.Exception("SolicitarMilhas.TypeKeys");
        	}
        }
        
        public void SetCalendarDate(string calendarIcon, string date)
        {
        	try 
        	{
        		if(date.Equals(""))
        		{
        			return;
        		}
        		var currCultureInfo = CultureInfo.CreateSpecificCulture("pt-br");
        		Report.Info("Selectiong date on calendar with date: " + date);
        		WebElement calendar = repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + calendarIcon;
        		calendar.EnsureVisible();
        		calendar.Click(Duration.FromMilliseconds(1));
        		System.DateTime newDate = System.DateTime.Parse(date, currCultureInfo);
				Smiles_UserCode.SetCalendarDate(newDate.ToString(),repo);
				Report.Info("Date: " + date + " selected");
        	} catch (Exception) {
        		Report.Error("SolicitarMilhas - Error launched trying to select date " + date);
        		throw new System.Exception("SolicitarMilhas.SetCalendarDate");
        	}
        }
        
        private void anexarArquivo(string arquivo, string webElement){
        	try {
        		if(arquivo.Equals(""))
        		{
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Attaching file '" + arquivo + "'");
        		Smiles_UserCode.anexarArquivo(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + webElement, arquivo,repo);
        		Report.Log(ReportLevel.Info,"File attached");
        	} catch (Exception e) {
        		Report.Error("SolicitarMilhas - Error launched trying to insert " + arquivo + ". Error: " + e.Message);
        		throw new System.Exception("SolicitarMilhas.anexarArquivo");
        	}
        }

        public void SelectItemFloatBox(string inputTagElement, string floatBoxElement, string text)
        {
        	try {
        		if (text.Equals("")) 
        		{
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Seleting item '" + text + "'");
        		Utils.SelectItemFloatBox(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + inputTagElement, repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + floatBoxElement,text,"1");
        		Report.Log(ReportLevel.Info,"Item '" + text + "' selected");
        	} catch (Exception) 
        	{
        		Report.Error("SolicitarMilhas - Error launched trying to select item '" + text + "'");
        		throw new System.Exception("SolicitarMilhas.SelectItemFloatBox");
        	}
        }
        private void clickIfExists(){
        	try {
        		Report.Log(ReportLevel.Info,"Verifying OK button");	
        		if (Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.SolicitarMilhas_OKInfo.AbsolutePath.ToResolvedString(), 4000)) {
        			repo.SmilesOMelhorProgramaDeMilhasS1.SolicitarMilhas_OK.Click(Duration.FromMilliseconds(1));
        		}
        		Report.Log(ReportLevel.Info,"OK button verified");	
        	} catch (Exception) {
        		Report.Error("SolicitarMilhas - Error launched verifying OK button");
        		throw new System.Exception("SolicitarMilhas.clickIfExists");
        	}
        }

        public void CheckVisible()
        {
        	if (!Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + "//input[@name='_smilescreditrequestportlet_WAR_smilesmemberportlet_flightNumber' and @visible='True']", 2000) && !Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + "//input[@name~'_smilescreditrequestportlet_WAR_smilesmemberportlet_trackingNumber' and @visible='True']", 2000) && !Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + "//input[@name='_smilescreditrequestportlet_WAR_smilesmemberportlet_flightNumber' and @visible='True']", 2000) && !Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + "//input[@name~'_smilescreditrequestportlet_WAR_smilesmemberportlet_trackingNumberG31' and @visible='True']", 2000)) {
        		Keyboard.Press("{NEXT}");
        	}
        }
    }
}