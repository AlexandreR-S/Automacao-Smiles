///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace POCSmiles.GIFT
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CriarEvento recording.
    /// </summary>
    [TestModule("b9882755-3b7a-4852-9df7-666225760309", ModuleType.Recording, 1)]
    public partial class CriarEvento : ITestModule
    {
        /// <summary>
        /// Holds an instance of the POCSmiles.SmilesRepository repository.
        /// </summary>
        public static POCSmiles.SmilesRepository repo = POCSmiles.SmilesRepository.Instance;

        static CriarEvento instance = new CriarEvento();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CriarEvento()
        {
            Viagem = "";
            CategoriaEvento = "";
            TempoViagemInicio = "";
            TempoViagemFim = "";
            ArrecadarMilhasAte = "";
            PathFotoPerfil = "";
            PathFotoCapa = "";
            LinkVideo = "";
            Destino = "yourtext";
            QuantidadeMilhasNecessarias = "yourtext";
            Resumo = "";
            SuaHistoria = "";
            NomeEvento = "yourtext";
            TipoViagem = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CriarEvento Instance
        {
            get { return instance; }
        }

#region Variables

        string _Viagem;

        /// <summary>
        /// Gets or sets the value of variable Viagem.
        /// </summary>
        [TestVariable("9f1d8065-7ab3-42e8-bfbe-df37b17b1d9d")]
        public string Viagem
        {
            get { return _Viagem; }
            set { _Viagem = value; }
        }

        string _CategoriaEvento;

        /// <summary>
        /// Gets or sets the value of variable CategoriaEvento.
        /// </summary>
        [TestVariable("ffa9d849-f167-4d2d-8bb4-cc0eda9eff31")]
        public string CategoriaEvento
        {
            get { return _CategoriaEvento; }
            set { _CategoriaEvento = value; }
        }

        string _TempoViagemInicio;

        /// <summary>
        /// Gets or sets the value of variable TempoViagemInicio.
        /// </summary>
        [TestVariable("b24d6298-1283-4104-a864-52e774246a0e")]
        public string TempoViagemInicio
        {
            get { return _TempoViagemInicio; }
            set { _TempoViagemInicio = value; }
        }

        string _TempoViagemFim;

        /// <summary>
        /// Gets or sets the value of variable TempoViagemFim.
        /// </summary>
        [TestVariable("136e026d-00be-4ae0-bdf0-bbad934127df")]
        public string TempoViagemFim
        {
            get { return _TempoViagemFim; }
            set { _TempoViagemFim = value; }
        }

        string _ArrecadarMilhasAte;

        /// <summary>
        /// Gets or sets the value of variable ArrecadarMilhasAte.
        /// </summary>
        [TestVariable("ddb87df6-05ad-4a7b-9d86-49f0d47643e1")]
        public string ArrecadarMilhasAte
        {
            get { return _ArrecadarMilhasAte; }
            set { _ArrecadarMilhasAte = value; }
        }

        string _PathFotoPerfil;

        /// <summary>
        /// Gets or sets the value of variable PathFotoPerfil.
        /// </summary>
        [TestVariable("7b01d53d-adc9-40e2-87bd-18e2f79b9fe2")]
        public string PathFotoPerfil
        {
            get { return _PathFotoPerfil; }
            set { _PathFotoPerfil = value; }
        }

        string _PathFotoCapa;

        /// <summary>
        /// Gets or sets the value of variable PathFotoCapa.
        /// </summary>
        [TestVariable("0bb8ca68-7724-4321-b1f6-f397ebe599b1")]
        public string PathFotoCapa
        {
            get { return _PathFotoCapa; }
            set { _PathFotoCapa = value; }
        }

        string _LinkVideo;

        /// <summary>
        /// Gets or sets the value of variable LinkVideo.
        /// </summary>
        [TestVariable("7ca7c6e5-cd72-41ef-8f92-543699295d2f")]
        public string LinkVideo
        {
            get { return _LinkVideo; }
            set { _LinkVideo = value; }
        }

        string _Destino;

        /// <summary>
        /// Gets or sets the value of variable Destino.
        /// </summary>
        [TestVariable("1cd1bf92-0688-4077-bc5c-f78b79291e5c")]
        public string Destino
        {
            get { return _Destino; }
            set { _Destino = value; }
        }

        string _QuantidadeMilhasNecessarias;

        /// <summary>
        /// Gets or sets the value of variable QuantidadeMilhasNecessarias.
        /// </summary>
        [TestVariable("b81434e7-0caf-4d70-bdd1-c8146bba21f3")]
        public string QuantidadeMilhasNecessarias
        {
            get { return _QuantidadeMilhasNecessarias; }
            set { _QuantidadeMilhasNecessarias = value; }
        }

        string _Resumo;

        /// <summary>
        /// Gets or sets the value of variable Resumo.
        /// </summary>
        [TestVariable("5a6de827-b717-47a9-b35b-cac852779732")]
        public string Resumo
        {
            get { return _Resumo; }
            set { _Resumo = value; }
        }

        string _SuaHistoria;

        /// <summary>
        /// Gets or sets the value of variable SuaHistoria.
        /// </summary>
        [TestVariable("0a9892cf-f33a-4794-a148-09b2daa25695")]
        public string SuaHistoria
        {
            get { return _SuaHistoria; }
            set { _SuaHistoria = value; }
        }

        string _NomeEvento;

        /// <summary>
        /// Gets or sets the value of variable NomeEvento.
        /// </summary>
        [TestVariable("3d60c970-e022-4087-ac95-fdcb7c3096fd")]
        public string NomeEvento
        {
            get { return _NomeEvento; }
            set { _NomeEvento = value; }
        }

        string _TipoViagem;

        /// <summary>
        /// Gets or sets the value of variable TipoViagem.
        /// </summary>
        [TestVariable("3880c657-9e5d-45fe-a537-9c808bd89672")]
        public string TipoViagem
        {
            get { return _TipoViagem; }
            set { _TipoViagem = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.GIFT_CrieSuaViagem' at Center.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_CrieSuaViagemInfo, new RecordItemIndex(0));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_CrieSuaViagem.Click(1);
            Delay.Milliseconds(490);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SmilesOMelhorProgramaDeMilhasS1.GIFT_FotoPerfil'.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_FotoPerfilInfo, new RecordItemIndex(1));
            Validate.Exists(repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_FotoPerfilInfo);
            Delay.Milliseconds(0);
            
            anexarArquivo(PathFotoPerfil, "//div[#'profilePicture']");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for item 'SmilesOMelhorProgramaDeMilhasS1.PValidacao_Aguarde' to not exist.", repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_AguardeInfo, new ActionTimeout(60000), new RecordItemIndex(3));
            repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_AguardeInfo.WaitForNotExists(60000);
            
            anexarArquivo(PathFotoCapa, "//button[#'frontPicture']");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for item 'SmilesOMelhorProgramaDeMilhasS1.PValidacao_Aguarde' to not exist.", repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_AguardeInfo, new ActionTimeout(60000), new RecordItemIndex(5));
            repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_AguardeInfo.WaitForNotExists(60000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LinkVideo' with focus on 'SmilesOMelhorProgramaDeMilhasS1.GIFT_LinkVideo'.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_LinkVideoInfo, new RecordItemIndex(6));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_LinkVideo.PressKeys(LinkVideo, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Destino' with focus on 'SmilesOMelhorProgramaDeMilhasS1.GIFT_Destino'.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_DestinoInfo, new RecordItemIndex(7));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_Destino.PressKeys(Destino, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$QuantidadeMilhasNecessarias' with focus on 'SmilesOMelhorProgramaDeMilhasS1.GIFT_MilhasSolicitadas'.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_MilhasSolicitadasInfo, new RecordItemIndex(8));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_MilhasSolicitadas.PressKeys(QuantidadeMilhasNecessarias, 1);
            Delay.Milliseconds(90);
            
            UserTypeKeys(NomeEvento, "//input[#'eventName']");
            Delay.Milliseconds(0);
            
            SelectOptionComboBox(TipoViagem);
            Delay.Milliseconds(0);
            
            SelectItemListBox("//div[@Class~'cs-select cs-skin-silver']", CategoriaEvento);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.GIFT_InicioViagem' at 72;27.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_InicioViagemInfo, new RecordItemIndex(12));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_InicioViagem.Click("72;27", 1);
            Delay.Milliseconds(490);
            
            SelectDateCalendar(TempoViagemInicio, "//input[#'eventTravelStartDate']");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.GIFT_FimViagem' at 70;24.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_FimViagemInfo, new RecordItemIndex(14));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_FimViagem.Click("70;24", 1);
            Delay.Milliseconds(490);
            
            SelectDateCalendar(TempoViagemFim, "//input[#'eventTravelEndDate']");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(16));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Resumo' with focus on 'SmilesOMelhorProgramaDeMilhasS1.GIFT_ResumoEvento'.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_ResumoEventoInfo, new RecordItemIndex(17));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_ResumoEvento.PressKeys(Resumo, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SuaHistoria' with focus on 'SmilesOMelhorProgramaDeMilhasS1.GIFT_ConteSuaHistoria'.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_ConteSuaHistoriaInfo, new RecordItemIndex(18));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_ConteSuaHistoria.PressKeys(SuaHistoria, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{TAB}'.", new RecordItemIndex(19));
            Keyboard.Press("{TAB}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.GIFT_FimEvento' at 55;24.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_FimEventoInfo, new RecordItemIndex(20));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_FimEvento.Click("55;24", 1);
            Delay.Milliseconds(490);
            
            SelectDateCalendar(ArrecadarMilhasAte, "//input[#'eventEndDate']");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.SemMilahs_EuConcordoComOs' at 11;17.", repo.SmilesOMelhorProgramaDeMilhasS1.SemMilahs_EuConcordoComOsInfo, new RecordItemIndex(22));
            repo.SmilesOMelhorProgramaDeMilhasS1.SemMilahs_EuConcordoComOs.Click("11;17", 1);
            Delay.Milliseconds(490);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmilesOMelhorProgramaDeMilhasS1.GIFT_CrieSeuEvento' at 107;26.", repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_CrieSeuEventoInfo, new RecordItemIndex(23));
            repo.SmilesOMelhorProgramaDeMilhasS1.GIFT_CrieSeuEvento.Click("107;26", 1);
            Delay.Milliseconds(490);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(24));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
