///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.Resultado_Esperado
{
    public partial class RP_ComprarPassagemGateway
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private void FocusModalMenssage()
        {
        	if (Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.Mensagem_CaixaMensagemInfo.AbsolutePath.ToResolvedString(),1000)) {
        	    	Report.Screenshot(repo.SmilesOMelhorProgramaDeMilhasS1.Mensagem_CaixaMensagem);
        	}
        }

        public void SavePNRDB(string cpf, string dataPartida, string qntAdultos, string qntCriancas, string qntBebes, string observaoesPNR, string tipoTrajeto)
        {
        	try {
        		System.DateTime newDate;
        		if (dataPartida.Contains("?")) {
        			dataPartida = dataPartida.Replace("?", InitSetup.ida1.ToString());
        		}
        		if (dataPartida.Contains("d+")) 
	        		{
	        			newDate = System.DateTime.Today.AddDays(int.Parse(dataPartida.Replace("d+","")));
	        		}else
	        		{
	        			newDate = System.DateTime.Parse(dataPartida);
	        		}
        		if (Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_LocalizadorInfo.AbsolutePath.ToResolvedString(),2000)) {
	        		POCSmiles.Resultado_Esperado.SalvarDadosExcel.codigoConfimacao = Smiles_UserCode.captureLocalizador(repo);
	        		Base_Dados.UtilsDB.insertNewPnr(cpf, POCSmiles.Resultado_Esperado.SalvarDadosExcel.codigoConfimacao, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._voo1, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._voo2, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._tarifaPorAdultoDinheiro, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._tarifaPorAdultoMilhas, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._taxasDinheiro, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._taxasMilhas, newDate.ToShortDateString(), POCSmiles.Resultado_Esperado.SalvarDadosExcel.vooReservado, (int.Parse(qntAdultos) +  int.Parse(qntCriancas) + int.Parse(qntBebes)).ToString(), observaoesPNR, InitSetup.detalhesVooIda, InitSetup.detalhesVooVolta, tipoTrajeto);
        		}else{
					Base_Dados.UtilsDB.insertNewPnr(cpf, "PEDIDO_" + Smiles_UserCode.captureOrderInURL(repo), POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._voo1, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._voo2, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._tarifaPorAdultoDinheiro, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._tarifaPorAdultoMilhas, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._taxasDinheiro, POCSmiles.Resultado_Esperado.RP_ValidacaoEmissao._taxasMilhas, newDate.ToShortDateString(), POCSmiles.Resultado_Esperado.SalvarDadosExcel.vooReservado, (int.Parse(qntAdultos) +  int.Parse(qntCriancas) + int.Parse(qntBebes)).ToString(), observaoesPNR, InitSetup.detalhesVooIda, InitSetup.detalhesVooVolta, tipoTrajeto);
        			Report.Warn("Any fly id was found");
        		}
        	}catch (Exception e) {
        		Report.Error("Database query execution  exception- Error updating user in data base: " + e.Message);	
        	}
        }

    }
}