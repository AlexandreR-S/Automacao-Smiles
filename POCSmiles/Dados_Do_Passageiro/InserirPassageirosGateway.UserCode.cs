///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;
using POCSmiles.Resultado_Esperado;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.Dados_Do_Passageiro
{
    public partial class InserirPassageirosGateway
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        private void InsertPassengers(string index, string favorite, string name, string lastName, string genrer, string birthday, string email, string addFavorite, string numPassporte, string vencimentoPassaporte, string paisEmissor){
        	try 
        	{
        		var currCultureInfo = CultureInfo.CreateSpecificCulture("pt-br");
        		if (!favorite.Equals("") || !name.Equals("") || !lastName.Equals("") || !genrer.Equals("") || !birthday.Equals("") || !email.Equals("") || !addFavorite.Equals("") || !numPassporte.Equals("") || !vencimentoPassaporte.Equals("") || !paisEmissor.Equals(""))
				{
    		    	   	if(favorite.ToUpper().Equals("TRUE"))
        		    	{
        		    		Utils.SelectItemFloatBox(repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_NomeInfo.AbsolutePath.ToResolvedString().Replace("0",index),repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_FavoritoInfo.AbsolutePath.ToResolvedString().Replace("0",index),name,"1");
        		    	}else 
        		    	{
        		    		if (!name.Equals(""))
        		    		{
								InputTag nameField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_NomeInfo.AbsolutePath.ToResolvedString().Replace("0",index);
								nameField.PressKeys(name,Duration.FromMilliseconds(1));
								repo.SmilesOMelhorProgramaDeMilhasS1.Self.Click();
        		    		}
        		    		if (!lastName.Equals(""))
        		    		{
        		    			InputTag lastNameField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_SobrenomeInfo.AbsolutePath.ToResolvedString().Replace("0",index);
        		    			lastNameField.PressKeys(lastName,Duration.FromMilliseconds(1));
        		    		}
        		    		if (!genrer.Equals(""))
        		    		{
        		    			Utils.SelectOptionComboBox(repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_GeneroInfo.AbsolutePath.ToResolvedString().Replace("0",index).Replace("GENERO",genrer));
        		    		}
        		    		if (!birthday.Equals(""))
	        				{
        		    			string dia = System.DateTime.Parse(birthday,currCultureInfo).Day.ToString();
	        					string mes = System.DateTime.Parse(birthday,currCultureInfo).Month.ToString();
	        					string ano = System.DateTime.Parse(birthday,currCultureInfo).Year.ToString();
	        					InputTag birthdayDayField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_DataNascimentoDiaInfo.AbsolutePath.ToResolvedString().Replace("0",index);
	        					InputTag birthdayMesField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_DataNascimentoMesInfo.AbsolutePath.ToResolvedString().Replace("0",index);
	        					InputTag birthdayAnoField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_DataNascimentoAnoInfo.AbsolutePath.ToResolvedString().Replace("0",index);
	        					birthdayDayField.PressKeys(dia,Duration.FromMilliseconds(1));
	        					birthdayMesField.PressKeys(mes,Duration.FromMilliseconds(1));
	        					birthdayAnoField.PressKeys(ano,Duration.FromMilliseconds(1));
	        				}
        		    		if (!email.Equals(""))
        		    		{
        		    			InputTag emailField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_EmailInfo.AbsolutePath.ToResolvedString().Replace("0",index);	
        		    			emailField.PressKeys(email,Duration.FromMilliseconds(1));
        		    		}
        		    		if (addFavorite.ToUpper().Equals("TRUE"))
        		    		{
        		    			InputTag fav = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_FavoritoInfo.AbsolutePath.ToResolvedString().Replace("0",index);	
        		    			fav.Click(Duration.FromMilliseconds(1));
        		    		}
        		    	}
    		    	if (!numPassporte.Equals("")) {
						InputTag passportField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_PassaporteInfo.AbsolutePath.ToResolvedString().Replace("0",index);
        		    	passportField.PressKeys(numPassporte,Duration.FromMilliseconds(1));	        		    			
    		    	}
        		    if (!vencimentoPassaporte.Equals("")) {
        		    	string dia = System.DateTime.Parse(vencimentoPassaporte, currCultureInfo).Day.ToString();
	        			string mes = System.DateTime.Parse(vencimentoPassaporte,currCultureInfo).Month.ToString();
	        			string ano = System.DateTime.Parse(vencimentoPassaporte,currCultureInfo).Year.ToString();
	        			InputTag validDayField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_DataVencimentoPassaporteDiaInfo.AbsolutePath.ToResolvedString().Replace("0",index);
	        			InputTag validMesField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_DataVencimentoPassaporteMesInfo.AbsolutePath.ToResolvedString().Replace("0",index);
	        			InputTag validAnoField = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_DataVencimentoPassaporteAnoInfo.AbsolutePath.ToResolvedString().Replace("0",index);
	        			validDayField.PressKeys(dia,Duration.FromMilliseconds(1));
	        			validMesField.PressKeys(mes,Duration.FromMilliseconds(1));
	        			validAnoField.PressKeys(ano,Duration.FromMilliseconds(1));
        		    }
        		    if (!paisEmissor.Equals("")) {
        		    	Utils.SelectItemListBox(repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_PaisEmissorInfo.AbsolutePath.ToResolvedString().Replace("0", index),paisEmissor);
        		    }
        		}
				if(index.Equals("0"))
				{
	        		RP_ValidacaoEmissao._passenger1 = "";
		        	RP_ValidacaoEmissao._passenger1 = repo.SmilesOMelhorProgramaDeMilhasS1.Passageiros.Passageiro_Nome.Element.GetAttributeValueText("Value").ToString();
	        	}
        	} 
        	catch (Exception e)
        	{
        		Report.Error("InsertPassengers - Error inserting passengers. Error: " + e.Message + "\nTrace:" + e.StackTrace);
        		throw new System.Exception("InserirPassageiros.InsertPassengers");
        	}
        }
        
        private void WaitLoad(){
        	try {
        		Report.Info("Waiting load");
        		Smiles_UserCode.WaitLoad(repo,10);
        		Report.Info("Page loaded");
        	} catch (Exception e) {
        		Report.Error("InsertPassengers - Error waiting load. Error: " + e.Message);
        		throw new System.Exception("InserirPassageiros.WaitLoad");
        	}
        }

        public void WaitSmilesLoad()
        {
        	try {
        		Report.Info("Waiting Smiles' loading GIF");
        		Smiles_UserCode.WaitSmilesLoadGIF(repo,60);
        		Report.Info("Smiles' loading GIF desapeared");
        	} catch (Exception) {
        		Report.Error("SelecionarVoo - Error waiting Smiles' loading GIF desapear");
        		throw new System.Exception("SelecionarVoo.WaitSmilesLoad");
        	}
        }
    }
}