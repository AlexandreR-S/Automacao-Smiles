///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;
using POCSmiles.Resultado_Esperado;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.Selecao_De_Voos
{
    public partial class VC_Pedido
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private static void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private void CaptureValues(){
        	try {
        		Report.Info("Capturing values to validate");
        		bool isVoo1 = Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_Voo1Info.AbsolutePath.ToResolvedString(),2500);
        		bool isVoo2 = Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_Voo2Info.AbsolutePath.ToResolvedString(),2500);
        		bool tarifaPorAdultoMilhas = Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TarifasMilhasInfo.AbsolutePath.ToResolvedString(),2500);
        		bool tarifaPorAdultoDinheiro = Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TarifasDinheiroInfo.AbsolutePath.ToResolvedString(),2500);
        		bool taxasDinheiro = Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TaxasDinheiroInfo.AbsolutePath.ToResolvedString(),2500);
        		bool taxasMilhas = Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TaxasMilhasInfo.AbsolutePath.ToResolvedString(),2500);
					
        		if (isVoo1) 
        		{
        			_voo1 = repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_Voo1.Element.GetAttributeValueText("InnerText").Replace("VOO: ","").Trim();
        			RP_ValidacaoEmissao._voo1 = _voo1.Replace("-"," - ").ToUpper();
        		}
        		if (isVoo2) 
        		{
        			_voo2 = repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_Voo2.Element.GetAttributeValueText("InnerText").Replace("VOO: ","").Trim();
        			RP_ValidacaoEmissao._voo2 = _voo2.Replace("-"," - ").ToUpper();
        		}
        		if (tarifaPorAdultoMilhas) 
        		{
        			_tarifaPorAdultoMilhas = repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TarifasMilhas.Element.GetAttributeValueText("InnerText").Replace("milhas","").Trim();
        			if (_tarifaPorAdultoMilhas.Equals("")) {
        				_tarifaPorAdultoMilhas = "0";
        			}
        			RP_ValidacaoEmissao._tarifaPorAdultoMilhas = _tarifaPorAdultoMilhas;
        		}
        		if (tarifaPorAdultoDinheiro) 
        		{
        			_tarifaPorAdultoDinheiro = 	repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TarifasDinheiro.Element.GetAttributeValueText("InnerText").Replace("+","").Replace("R$","").Trim();
        			if (_tarifaPorAdultoDinheiro.Equals("")) {
        				_tarifaPorAdultoDinheiro = "0,00";
        			}
        			RP_ValidacaoEmissao._tarifaPorAdultoDinheiro = _tarifaPorAdultoDinheiro;
        		}
        		if (taxasDinheiro) 
        		{
        			_taxasDinheiro = repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TaxasDinheiro.Element.GetAttributeValueText("InnerText").Replace("+","").Replace("R$","").Trim();
        			if (_taxasDinheiro.Equals("")) {
        				_taxasDinheiro = "0,00";
        			}
        			RP_ValidacaoEmissao._taxasDinheiro = _taxasDinheiro;
        		}
        		if (taxasMilhas) 
        		{
        			_taxasMilhas = repo.SmilesOMelhorProgramaDeMilhasS1.PValidacao_TaxasMilhas.Element.GetAttributeValueText("InnerText").Replace("milhas","").Trim();
        			if (_taxasMilhas.Equals("")) {
        				_taxasMilhas = "0";
        			}
        			RP_ValidacaoEmissao._taxasMilhas = _taxasMilhas;
        		}
        		Report.Info("Values captured to validate");
        	} catch (Exception) {
        		Report.Error("VC_Pedido - Error capturing values to validate");
        		throw new System.Exception("VC_Pedido.CaptureValues");
        	}
        }
    }
}