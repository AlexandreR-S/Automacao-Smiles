///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.Mobile.RxBrowser.Meus_Voos
{
    public partial class SelecionarVooAssento
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }


        public void SelecionarAssento(string tipoAssento, string tipoPagamento)
        {
        	try {
        		if (tipoAssento.Equals("")) {
        			return;
        		}
        		Report.Info("Selecting chair(s)");
        		string chair = "";
        		int cont = 1;
        		switch (tipoAssento) {
        			case "CONFORT":
        				chair = "@Class='chair chairComfort'";
        				break;
        			case "NORMAL":
        				chair = "@Class='chair'";
        				break;
        			case "EMERGENCIA":
        				chair = "@Class='chair chairExit'";
        				break;
        		}
        		if (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@class='client-details']",3000)) {
        			while (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@class='client-details']/div[@Class='client-info '][" + (cont) +"]",2000)){
	        			SpanTag e = repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@Class='client-info '][" + (cont) +"]//span";
	        			e.Touch();
	        			Delay.Duration(Duration.FromMilliseconds(1000));
	        			Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,30);
	        			PTag p = repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[" + chair + "][" + cont +"]//P";
	        			p.Touch();
	        			Delay.Duration(Duration.FromMilliseconds(1000));
	        			Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,30);
	        			if (tipoPagamento.Equals("Money")) {
	        				if (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[1]/Input",1500)) {
	        					Utils.TouchElement(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[1]/Input", true);
								Delay.Duration(Duration.FromMilliseconds(1000));
	        					Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,30);	        					
	        				}else{
	        					Report.Warn("You selected '" + tipoPagamento + "', but any option was showed.");
	        				}
	        			}else{
	        				if (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[2]/Input",1500)) {
	        					Utils.TouchElement(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[2]/Input", true);
	        				}else{
	        					Report.Warn("You selected '" + tipoPagamento + "', but any option was showed.");
	        				}
	        			}
	        			cont++;
	        		}
	        		if (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@class='btnInfoVoo ']",2000)) {
	        			cont = 1;
	        			Utils.TouchElement(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@class='btnInfoVoo ']", false);
	        			Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,30);
	        			if (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@Class~'client-info'][" + (cont) +"]",10000)) {
		        			while (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@class='client-details']/div[@Class='client-info '][" + (cont) +"]",2000)){
			        			SpanTag e = repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@Class='client-info '][" + (cont) +"]//span";
			        			e.Touch();
			        			Delay.Duration(Duration.FromMilliseconds(1000));
			        			Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,30);
			        			PTag p = repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[" + chair + "][" + cont +"]//P";
			        			p.Touch();
			        			Delay.Duration(Duration.FromMilliseconds(1000));
			        			Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,30);
			        			if (tipoPagamento.Equals("Money")) {
			        				if (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[1]/Input",1500)) {
			        					Utils.TouchElement(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[1]/Input", true);
										Delay.Duration(Duration.FromMilliseconds(1000));
			        					Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,120);	        					
			        				}else{
			        					Report.Warn("You selected '" + tipoPagamento + "', but any option was showed.");
			        				}
			        			}else{
			        				if (Utils.CheckExist(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[2]/Input",1500)) {
			        					Utils.TouchElement(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + "//div[@id~'paymentOptionClient' and @visible='True']//p[2]/Input", true);
			        				}else{
			        					Report.Warn("You selected '" + tipoPagamento + "', but any option was showed.");
			        				}
			        			}
			        			cont++;
			        		}
	        			}
	        		}	
        		}
        		Report.Info("Chair(s) selected");
        	} catch (Exception e) {
        		Report.Error("EscolherAssentos - Error selecting chairs:" + e.Message);
        		throw new System.Exception("EscolherAssentos.SelecionarAssento");
        	}
        }

        public void WaitSmilesLoad()
        {
        	try {
        		Report.Info("Waiting Smiles' loading GIF");
        		Smiles_UserCode.WaitSmilesLoadGIFMobile(repo,120);
        		Report.Info("Smiles' loading GIF desapeared");
        	} catch (Exception) {
        		Report.Error("SelecionarVoo - Error waiting Smiles' loading GIF desapear");
        		throw new System.Exception("SelecionarVoo.WaitSmilesLoad");
        	}
        }

        public void SelecionarVoo(string identificador)
        {
        	try {
        		int i = 1;
        		Report.Info("Searching fly '" + identificador + "'");
        		WebElement element = repo.RxBrowser.Dom.Button_ProximosVoosBotaoExpandirInfo.AbsolutePath.ToResolvedString().Replace("XXX",identificador);
        		element.Touch();
        		Delay.Seconds(2);
        		repo.RxBrowser.Dom.Self.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "0.5"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "1s"), 0);
        		repo.RxBrowser.Dom.A_AlterarAssento.Touch();
        	} catch (Exception e) {
        		Report.Error("SelecionarVoo - Error trying to select. Error:" + e.Message);
        		throw new System.Exception("SelecionarVoo.SelecionarVoo");
        	}
        }

        public void WaitForDocumentLoad()
        {
        	try {
        		if (!repo.RxBrowser.Self.Element.GetAttributeValueText("OSVersion").ToUpper().Contains("IOS")) {
        			Report.Log(ReportLevel.Info, "Invoke Action", "Invoking WaitForDocumentLoaded() on item 'RxBrowser.Dom'.", repo.RxBrowser.Dom.SelfInfo, new RecordItemIndex(3));
		            repo.RxBrowser.Dom.Self.WaitForDocumentLoaded();
		            Delay.Milliseconds(0);
        		}
        	} catch (Exception e) {
        		Report.Failure("Error launched trying to wwait dom statte. Error: " + e.Message);
        		throw new Exception("FAtal error");
        	}
        }

    }
}
