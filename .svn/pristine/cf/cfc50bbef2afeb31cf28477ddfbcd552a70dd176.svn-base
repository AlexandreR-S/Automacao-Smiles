///////////////////////////////////////////////////////////////////////////////
//
// FormProgesso file was automatically generated by RANOREX.
// Your custom recording code should go in FormProgesso file.
// The designer will only add methods to FormProgesso file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.Busca_De_Voos
{
    public partial class BuscarVoos
    {
        /// <summary>
        /// FormProgesso method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private void SelectItemListBox(string selectTagElement, string itemName){
        	try 
        	{
        		Report.Log(ReportLevel.Info,"Selecting item '" + itemName + "'");
        		Utils.SelectItemListBox(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + selectTagElement, itemName);	
        		Report.Log(ReportLevel.Info,"Item '" + itemName + "' selected");
        	} catch (Exception) 
        	{
        		Report.Error("BuscarVoos - Error launched trying to select item '" + itemName + "' on element '" + selectTagElement + "'");
        		throw new System.Exception("BuscarVoos.SeletItemListBox");
        	}
        }
        
        private void SelectItemFloatBox(string inputTagElement, string floatBoxElement, string text){
        	try {
        		if (text.Equals("")) 
        		{
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Seleting item '" + text + "'");
        		Utils.SelectItemFloatBox(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + inputTagElement,repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + floatBoxElement,text,"1");
        		Report.Log(ReportLevel.Info,"Item '" + text + "' selected");
        	} catch (Exception) 
        	{
        		Report.Error("BuscarVoos - Error launched trying to select item '" + text + "'");
        		throw new System.Exception("BuscarVoos.SelectItemFloatBox");
        	}
        }
        
        public void SetCalendarDate(string calendarIcon, string date)
        {
        	try 
        	{
        		if(date.Equals(""))
        		{
        			return;
        		}
        		
        		Report.Info("Selectiong date on calendar with date: " + date);
        		InputTag calendar = repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + calendarIcon;
        		calendar.EnsureVisible();
        		calendar.Click(Duration.FromMilliseconds(1));
        		System.DateTime newDate;
        		if (date.Contains("?")) {
        			Random rnd = new Random();
        			if (InitSetup.ida1 == 0) {
        				InitSetup.ida1 = rnd.Next(int.Parse(Utils.getGlobalValue("MIN_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.ida1.ToString());
        			}
        			else if(InitSetup.ida1 != 0 && InitSetup.volta1 == 0){
        				InitSetup.volta1 = rnd.Next(InitSetup.ida1 + 1, int.Parse(Utils.getGlobalValue("MAX_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.volta1.ToString());
        			}
        			else if(InitSetup.ida2 == 0){
        				InitSetup.ida2 = rnd.Next(int.Parse(Utils.getGlobalValue("MIN_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.ida2.ToString());
        			}
        			else if(InitSetup.ida2 != 0 && InitSetup.volta2 == 0){
        				InitSetup.volta2 = rnd.Next(InitSetup.ida2 + 1, int.Parse(Utils.getGlobalValue("MAX_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.volta2.ToString());
        			}
        		}
        		if (date.Contains("d+")) 
        		{
        			newDate = System.DateTime.Today.AddDays(int.Parse(date.Replace("d+","")));
        		}else
        		{
        			newDate = System.DateTime.Parse(date);
        		}
				Smiles_UserCode.SetCalendarDate(newDate.ToString(),repo);
				Report.Info("Date: " + date + " selected");
        	} catch (Exception e) {
        		Report.Error("BuscarVoos - Error launched trying to select date " + date + ". Message: " + e.Message);
        		throw new System.Exception("BuscarVoos.SetCalendarDate");
        	}
        }
        
        private void WaitSystemLoad(string timeout){
        	try {
        		Report.Info("Wainting system load");
        		Smiles_UserCode.WaitLoad(repo, int.Parse(timeout));
        		Report.Info("System loaded");
        	} catch (Exception) {
        		Report.Error("BuscarVoos - Error waiting system load. Timeout:" + timeout);
        		throw new System.Exception("BuscarVoos.WaitSystemLoad");
        	}
        }

        public void ClickIfExist()
        {
        	if (Utils.CheckExist(repo.SmilesOMelhorProgramaDeMilhasS1.BuscaVoo_MensagemMesmoDiaInfo.AbsolutePath.ToResolvedString(),3000)) {
        		repo.SmilesOMelhorProgramaDeMilhasS1.BuscaVoo_MensagemMesmoDia.Click(Duration.FromMilliseconds(1));
        	}
        }
    }
}