///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.Mobile.RxBrowser.BuscarVoo
{
    public partial class BuscarVoo
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void SelectItemFloatBox(string inputTagElement, string floatBoxElement, string text)
        {
        	try {
        		if (text.Equals("")) 
        		{
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Seleting item '" + text + "'");
        		UtilsMobile.SelectItemFloatBox(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + inputTagElement, repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + floatBoxElement,text,"1");
        		TriggerEvent1();
        		Report.Log(ReportLevel.Info,"Item '" + text + "' selected");
        	} catch (Exception e) 
        	{
        		Report.Error("BuscarVoos - Error launched trying to select item '" + text + "'. Error: " + e.Message);
        		throw new Exception("Fatal error");
        	}
        }
        public static void TriggerEvent1(){
        	var dom = repo.RxBrowser.Dom.Self;
        	string teste = dom.ExecuteScript("$('#inputOrigin>input').keypress();");
        	string a = "";
        }

        public void SelectItemListBox(string selectElement, string item)
        {
        	try {
        		
        	} catch (Exception) {
        		Report.Error("BuscarVoos - Error launched trying to select item '" + item + "'");
        		throw new Exception("Fatal error");
        	}
        }
        public void selectTipoTrajeto(string tipoTrajeto){
        	try {
        		switch (tipoTrajeto.ToUpper()) {
        			case "SOMENTE IDA":
        				repo.RxBrowser.Dom.CheckBox_SomenteIda.Touch();
        				break;
        			case "VÁRIOS TRECHOS":
        				break;
        			case "IDA E VOLTA":
        				repo.RxBrowser.Dom.Button_AdicionarTrecho.Touch();
        				break;
        			default:
        				Report.Error("BuscarVoos - Any value was found to select a kind of trip");
        				break;
        		}
        	} catch (Exception) {
        		Report.Error("BuscarVoos - Error launched trying to select item '" + tipoTrajeto + "'");
        		throw new Exception("Fatal error");
        	}
        }
        
        private void selectDate(string date, string inputElement){
        	try {
        		if (date.Equals("")) {
        			return;
        		}
        		System.DateTime newDate;
        		Report.Info("Selecting date: " + date);
        		if (date.Contains("?")) {
        			Random rnd = new Random();
        			if (InitSetup.ida1 == 0) {
        				InitSetup.ida1 = rnd.Next(int.Parse(Utils.getGlobalValue("MIN_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.ida1.ToString());
        			}
        			else if(InitSetup.ida1 != 0 && InitSetup.volta1 == 0){
        				InitSetup.volta1 = rnd.Next(InitSetup.ida1 + 1, int.Parse(Utils.getGlobalValue("MAX_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.volta1.ToString());
        			}
        			else if(InitSetup.ida2 == 0){
        				InitSetup.ida2 = rnd.Next(int.Parse(Utils.getGlobalValue("MIN_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.ida2.ToString());
        			}
        			else if(InitSetup.ida2 != 0 && InitSetup.volta2 == 0){
        				InitSetup.volta2 = rnd.Next(InitSetup.ida2 + 1, int.Parse(Utils.getGlobalValue("MAX_DATE_RANGE")));
        				date = date.Replace("?", InitSetup.volta2.ToString());
        			}
        		}
        		if (date.Contains("d+")) 
        		{
        			newDate = System.DateTime.Today.AddDays(int.Parse(date.Replace("d+","")));
        		}else
        		{
        			newDate = System.DateTime.Parse(date);
        		}
        		UtilsMobile.SetDate(newDate,repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + inputElement, repo.RxBrowser.UIDatePickerInfo.AbsolutePath.ToResolvedString());
        		Report.Info("Date " + date + " selected");
        	} catch (Exception e) {
        		Report.Failure("Error trying to select date " + date + ". Error: " + e.Message);
        		throw new Exception("Fatal error");
        	}
        }
        
        private void setText(string text, string inputElement, string touchBefore){
        	try {
        		if (text.Equals("")) {
        			return;
        		}
        		Report.Info("Inserting text " + text + " on element " + inputElement);
        		UtilsMobile.insertText(repo.RxBrowser.Dom.AbsoluteBasePath.ToResolvedString() + inputElement, text, bool.Parse(touchBefore));
        		repo.RxBrowser.Dom.Self.PressKeys("{ENTER}");
        		Report.Info("Text inserted");
        	} catch (Exception e) {
        		Report.Failure("Error trying to set text " + text + ". Error: " + e.Message);
        		throw new Exception("Fatal error");
        	}
        }
        
        private void selectPassengers(string adultos, string criancas, string bebes){
        	try {
        		if (!adultos.Equals("") && !adultos.Equals("0")) {
        			int countMax = int.Parse(adultos);
        			for (int count = 1; count < countMax; count++) {
        				repo.RxBrowser.Dom.Button_AddAdulto.Touch();
        			}
        		}
        		if (!criancas.Equals("") && !criancas.Equals("0")) {
        			int countMax = int.Parse(criancas);
        			for (int count = 0; count < countMax; count++) {
        				repo.RxBrowser.Dom.Button_AddCrianca.Touch();
        			}
        		}
        		if (!bebes.Equals("") && !bebes.Equals("0")) {
        			int countMax = int.Parse(bebes);
        			for (int count = 0; count < countMax; count++) {
        				repo.RxBrowser.Dom.Button_AddBebe.Touch();
        			}
        		}
        	} catch (Exception e) {
        		Report.Failure("Error trying to select passengers. Error" + e.Message);
        		throw new Exception("Fatal error");
        	}
        }

        public void WaitForDocumentLoad()
        {
        	try {
        		if (!repo.RxBrowser.Self.Element.GetAttributeValueText("OSVersion").ToUpper().Contains("IOS")) {
        			Report.Log(ReportLevel.Info, "Invoke Action", "Invoking WaitForDocumentLoaded() on item 'RxBrowser.Dom'.", repo.RxBrowser.Dom.SelfInfo, new RecordItemIndex(3));
		            repo.RxBrowser.Dom.Self.WaitForDocumentLoaded();
		            Delay.Milliseconds(0);
        		}
        	} catch (Exception e) {
        		Report.Failure("Error launched trying to wwait dom statte. Error: " + e.Message);
        		throw new Exception("FAtal error");
        	}
        }

    }
}