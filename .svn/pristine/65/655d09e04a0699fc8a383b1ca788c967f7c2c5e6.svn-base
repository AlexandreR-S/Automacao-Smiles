///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace POCSmiles.Mobile.RxBrowser.Login
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The LoginHeader recording.
    /// </summary>
    [TestModule("5698c11e-b6ce-498e-bde2-3a8595e6b950", ModuleType.Recording, 1)]
    public partial class LoginHeader : ITestModule
    {
        /// <summary>
        /// Holds an instance of the POCSmiles.SmilesRepository repository.
        /// </summary>
        public static POCSmiles.SmilesRepository repo = POCSmiles.SmilesRepository.Instance;

        static LoginHeader instance = new LoginHeader();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public LoginHeader()
        {
            CPFSmilesID = "";
            URL = "";
            Senha = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static LoginHeader Instance
        {
            get { return instance; }
        }

#region Variables

        string _CPFSmilesID;

        /// <summary>
        /// Gets or sets the value of variable CPFSmilesID.
        /// </summary>
        [TestVariable("f2a7321e-a55d-43b3-9fb5-c8857884646f")]
        public string CPFSmilesID
        {
            get { return _CPFSmilesID; }
            set { _CPFSmilesID = value; }
        }

        string _Senha;

        /// <summary>
        /// Gets or sets the value of variable Senha.
        /// </summary>
        [TestVariable("d21bed1c-bf20-4e5e-a2bb-8bc47378a538")]
        public string Senha
        {
            get { return _Senha; }
            set { _Senha = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Dispositivo.
        /// </summary>
        [TestVariable("da3e43bb-7e4d-42d3-af80-4010368868c5")]
        public string Dispositivo
        {
            get { return repo.Dispositivo; }
            set { repo.Dispositivo = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable URL.
        /// </summary>
        [TestVariable("b950eed9-7a84-40f9-ad58-d1d9c02f8dd0")]
        public string URL
        {
            get { return repo.URL; }
            set { repo.URL = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'RxBrowser.Dom.Button_Entrar' at Center", repo.RxBrowser.Dom.Button_EntrarInfo, new RecordItemIndex(0));
            repo.RxBrowser.Dom.Button_Entrar.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute value to '$CPFSmilesID' on item 'RxBrowser.Dom.Input_Usuario'.", repo.RxBrowser.Dom.Input_UsuarioInfo, new RecordItemIndex(1));
            repo.RxBrowser.Dom.Input_Usuario.Element.SetAttributeValue("value", CPFSmilesID);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'RxBrowser.Dom.Input_Senha' at Center", repo.RxBrowser.Dom.Input_SenhaInfo, new RecordItemIndex(2));
            repo.RxBrowser.Dom.Input_Senha.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute value to '$Senha' on item 'RxBrowser.Dom.Input_Senha'.", repo.RxBrowser.Dom.Input_SenhaInfo, new RecordItemIndex(3));
            repo.RxBrowser.Dom.Input_Senha.Element.SetAttributeValue("value", Senha);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.RxBrowser.Self, false, new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'RxBrowser.Dom.Button_SubmeterLogin' at Center", repo.RxBrowser.Dom.Button_SubmeterLoginInfo, new RecordItemIndex(5));
            repo.RxBrowser.Dom.Button_SubmeterLogin.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(6));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for item 'RxBrowser.Dom' to exist.", repo.RxBrowser.Dom.SelfInfo, new ActionTimeout(30000), new RecordItemIndex(7));
            repo.RxBrowser.Dom.SelfInfo.WaitForExists(30000);
            
            WaitForDocumentLoad();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for item 'RxBrowser.Dom.Button_SubmeterLogin' to not exist.", repo.RxBrowser.Dom.Button_SubmeterLoginInfo, new ActionTimeout(30000), new RecordItemIndex(9));
            repo.RxBrowser.Dom.Button_SubmeterLoginInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(10));
            Delay.Duration(500, false);
            
            WaitForDocumentLoad();
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.RxBrowser.Self, false, new RecordItemIndex(12));
            
            AtualizarMilhasBD(CPFSmilesID, URL);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
