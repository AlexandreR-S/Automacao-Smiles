///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace POCSmiles.ClubeSmiles
{
    public partial class PreCadastro
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
		
        public static string randomCPF = "";
        public static string randomEmail = "";
        
        public void InserirCPF(string cpf)
        {
        	try {
        		Report.Info("Inserting CPF");
        		if (cpf.Equals("ALEATORIO")) {
        			setCPF();
        			repo.SmilesOMelhorProgramaDeMilhasS1.Clube_CPF.PressKeys(randomCPF,Duration.FromMilliseconds(1));
	        	}else{
        			randomCPF = cpf;
	        		repo.SmilesOMelhorProgramaDeMilhasS1.Clube_CPF.PressKeys(cpf,Duration.FromMilliseconds(1));
	        	}	
        		Report.Info("CPF inserted");
        	} catch (Exception e) {
        		Report.Failure("Error launched inserting CPF. Error: " + e.Message);
        	}
        }

        public void SelectItemListBox(string selectTagElement, string itemName)
        {
        	try 
        	{
        		if(itemName.Equals("")){
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Selecting item '" + itemName + "'");
        		Utils.SelectItemListBox(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + selectTagElement, itemName);
        		Report.Log(ReportLevel.Info,"Item '" + itemName + "' selected");
        	} catch (Exception) 
        	{
        		Report.Error("PreCadastro - Error launched trying to select item '" + itemName + "' on element '" + selectTagElement + "'");
        		throw new System.Exception("PreCadastro.SeletItemListBox");
        	}
        }

        public void SeleclGenrerFlag(string sexo)
        {
        	try {
        		if (sexo.Equals("")) {
        			return;
        		}
        		Report.Info("Selecting");
        				Utils.ClickElementAsHuman(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString(),"InnerText",sexo,"1");
        		Report.Info(sexo + " selected");
        	} catch (Exception) {
        		Report.Error("CadastrarUsuario - Error waiting browser loading");
        		throw new System.Exception("CadastrarUsuario.SelectCreditCardFlag");
        	}
        }

        public void setEmail(string email)
        {
        	try {
        		Report.Log(ReportLevel.Info,"Inserting '" + email + "'");
        		if (email.Trim().Equals("ALEATORIO")) {
        			email = setRandomEmail();
        			repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_Email.PressKeys(email,Duration.FromMilliseconds(1));
        			randomEmail = email;
        		}
        		else if (email.Trim().Equals("CONFIRMAR")) {
        			repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_ConfirmarEmail.PressKeys(setRandomEmail(),Duration.FromMilliseconds(1));
        		}
        		else{
        			repo.SmilesOMelhorProgramaDeMilhasS1.PreCadastro_ConfirmarEmail.PressKeys(email,Duration.FromMilliseconds(1));
        			randomEmail = email;
        		}
        		Report.Info(email + " inserted");
        	} catch (Exception e) {
        		Report.Error("PreCadastro - Error waiting browser loading");
        		throw new System.Exception("PreCadastro.setEmail");
        	}
        }
        
        public void setCPF(){
        	randomCPF = Utils.GerarCpf();
        }
        
        public string setRandomEmail(){
        	return ("test" + randomCPF + "@email.com");
        }

        public void SelectItemListBoxAsHuman(string selectTagElement, string itemName, string elementIndex)
        {
        	try 
        	{
        		if(itemName.Equals("")){
        			return;
        		}
        		Report.Log(ReportLevel.Info,"Selecting item '" + itemName + "'");
        		Utils.SelectItemListBoxAsHuman(repo.SmilesOMelhorProgramaDeMilhasS1.AbsoluteBasePath.ToResolvedString() + selectTagElement, itemName, elementIndex);
        		Report.Log(ReportLevel.Info,"Item '" + itemName + "' selected");
        	} catch (Exception) 
        	{
        		Report.Error("PreCadastro - Error launched trying to select item '" + itemName + "' on element '" + selectTagElement + "'");
        		throw new System.Exception("PreCadastro.SelectItemListBoxAsHuman");
        	}
        }

        public void WaitSystemLoad(string timeout)
        {
        	try {
        		Report.Info("Wainting system load");
        		Smiles_UserCode.WaitLoad(repo, int.Parse(timeout));
        		Report.Info("System loaded");
        	} catch (Exception) {
        		Report.Error("BuscarVoos - Error waiting system load. Timeout:" + timeout);
        		throw new System.Exception("BuscarVoos.WaitSystemLoad");
        	}
        }

        public void WaitPageLoad()
        {
        	try {
        		Report.Info("Waiting page load");
        		Smiles_UserCode.WaitLoad(repo,30);
        		Report.Info("Page loaded");
        	} catch (Exception) {
        		Report.Error("SelecionarVoo - Error waiting page load");
        		throw new System.Exception("SelecionarVoo.WaitPageLoad");
        	}
        }

    }
}